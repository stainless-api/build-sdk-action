import { APIResource } from "../../resource.mjs";
import { APIPromise } from "../../api-promise.mjs";
import { RequestOptions } from "../../internal/request-options.mjs";
export declare class Outputs extends APIResource {
    /**
     * Get the output status and details for a specific target for a specific build
     */
    retrieve(params: OutputRetrieveParams, options?: RequestOptions): APIPromise<OutputRetrieveResponse>;
}
export interface BuildStepOutputInProgress {
    status: 'in_progress';
}
export interface BuildStepOutputNotStarted {
    status: 'not_started';
}
export interface BuildStepOutputQueued {
    status: 'queued';
}
export type CommitBuildStep = BuildStepOutputNotStarted | BuildStepOutputQueued | BuildStepOutputInProgress | CommitBuildStep.Completed;
export declare namespace CommitBuildStep {
    interface Completed {
        completed: Completed.Completed;
        status: 'completed';
    }
    namespace Completed {
        interface Completed {
            commit: Completed.Commit;
            conclusion: 'success' | 'failure' | 'skipped' | 'cancelled' | 'action_required' | 'neutral' | 'timed_out';
        }
        namespace Completed {
            interface Commit {
                repo: Commit.Repo;
                sha: string;
            }
            namespace Commit {
                interface Repo {
                    branch: string;
                    name: string;
                    owner: string;
                }
            }
        }
    }
}
export type LintBuildStep = BuildStepOutputNotStarted | BuildStepOutputQueued | BuildStepOutputInProgress | LintBuildStep.Completed;
export declare namespace LintBuildStep {
    interface Completed {
        completed: Completed.Completed;
        status: 'completed';
    }
    namespace Completed {
        interface Completed {
            conclusion: 'success' | 'failure' | 'skipped' | 'cancelled' | 'action_required' | 'neutral' | 'timed_out';
        }
    }
}
export type TestBuildStep = BuildStepOutputNotStarted | BuildStepOutputQueued | BuildStepOutputInProgress | TestBuildStep.Completed;
export declare namespace TestBuildStep {
    interface Completed {
        completed: Completed.Completed;
        status: 'completed';
    }
    namespace Completed {
        interface Completed {
            conclusion: 'success' | 'failure' | 'skipped' | 'cancelled' | 'action_required' | 'neutral' | 'timed_out';
        }
    }
}
export interface OutputRetrieveResponse {
    commit: CommitBuildStep;
    lint: LintBuildStep;
    test: TestBuildStep;
}
export interface OutputRetrieveParams {
    /**
     * The build ID
     */
    id: string;
    /**
     * The target to get the output for
     */
    target: 'node' | 'python' | 'go' | 'java' | 'kotlin' | 'ruby' | 'typescript';
}
export declare namespace Outputs {
    export { type BuildStepOutputInProgress as BuildStepOutputInProgress, type BuildStepOutputNotStarted as BuildStepOutputNotStarted, type BuildStepOutputQueued as BuildStepOutputQueued, type CommitBuildStep as CommitBuildStep, type LintBuildStep as LintBuildStep, type TestBuildStep as TestBuildStep, type OutputRetrieveResponse as OutputRetrieveResponse, type OutputRetrieveParams as OutputRetrieveParams, };
}
//# sourceMappingURL=outputs.d.mts.map