                              
import { NullableHeaders } from "./headers.js";
import type { Agent } from "./shims.js";
import type { BodyInit } from "./builtin-types.js";
import type { HTTPMethod } from "./types.js";
import { type HeadersLike } from "./headers.js";
export type FinalRequestOptions = RequestOptions & {
    method: HTTPMethod;
    path: string;
};
export type RequestOptions = {
    method?: HTTPMethod;
    path?: string;
    query?: object | undefined | null;
    body?: unknown;
    headers?: HeadersLike;
    maxRetries?: number;
    stream?: boolean | undefined;
    timeout?: number;
    httpAgent?: Agent;
    signal?: AbortSignal | undefined | null;
    idempotencyKey?: string;
    __binaryResponse?: boolean | undefined;
};
export declare const isRequestOptions: (obj: unknown) => obj is RequestOptions;
export type EncodedContent = {
    bodyHeaders: HeadersLike;
    body: BodyInit;
};
export type RequestEncoder = (request: {
    headers: NullableHeaders;
    body: unknown;
}) => EncodedContent;
export declare const FallbackEncoder: RequestEncoder;
//# sourceMappingURL=request-options.d.ts.map